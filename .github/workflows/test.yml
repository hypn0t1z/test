name: Sync, build and deploy Plasmic app

permissions:
  contents: write
  pull-requests: write

on:
  push:
    branches: [ main ]

jobs:
  job:
    name: Sync, build and deploy
    runs-on: ubuntu-latest
    steps:
      - id: checkout
        name: Checking out repository...
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          fetch-depth: 0
      
      - id: node
        name: Setting up node v18...
        uses: actions/setup-node@v3
        with:
          node-version: "18"
      
      - id: cache
        name: Recovering cache...
        uses: actions/cache@v4
        with:
          key: lock-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}
          path: ${{ github.event.client_payload.data.directory || '.' }}/node_modules
      
      - id: create_plasmic_config
        name: Creating Plasmic configuration file...
        run: |
          mkdir -p ${{ github.event.client_payload.data.directory || '.' }}
          cat > ${{ github.event.client_payload.data.directory || '.' }}/plasmic.json << 'EOL'
          {
            "host": "https://suinova.var-meta.com",
            "projects": []
          }
          EOL
          echo "Created plasmic.json with custom configuration"
      
      # Install dependencies if they don't exist
      - id: check_package_json
        name: Check if package.json exists
        run: |
          DIRECTORY="${{ github.event.client_payload.data.directory || '.' }}"
          if [ ! -f "$DIRECTORY/package.json" ]; then
            echo "Creating package.json"
            echo '{
              "name": "plasmic-app",
              "private": true,
              "version": "0.0.0",
              "type": "module",
              "scripts": {
                "dev": "vite",
                "build": "tsc && vite build",
                "preview": "vite preview"
              }
            }' > "$DIRECTORY/package.json"
          fi
      
      # Create plasmic-host.js file for custom host configuration
      - id: create_plasmic_host
        name: Create plasmic host configuration
        run: |
          DIRECTORY="${{ github.event.client_payload.data.directory || '.' }}"
          echo 'process.env.PLASMIC_HOST = "https://suinova.var-meta.com";' > "$DIRECTORY/plasmic-host.js"
          echo "Created plasmic-host.js with custom host configuration"
      
      - id: init
        name: Initializing Plasmic app...
        uses: phucvarmeta/plasmic-action@v1.0.0
        with:
          run: init
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.event.client_payload.data.branch }}
          directory: ${{ github.event.client_payload.data.directory }}
          project_id: ${{ github.event.client_payload.data.projectId }}
          project_api_token: ${{ github.event.client_payload.data.projectApiToken }}
          platform: ${{ github.event.client_payload.data.platform }}
          language: ${{ github.event.client_payload.data.language }}
          scheme: ${{ github.event.client_payload.data.scheme }}
          title: ${{ github.event.client_payload.data.title }}
          description: ${{ github.event.client_payload.data.description }}
      
      # Add a step to ensure the plasmic.json file is in the correct location after initialization
      - id: verify_plasmic_config
        name: Verify Plasmic configuration
        run: |
          DIRECTORY="${{ github.event.client_payload.data.directory || '.' }}"
          if [ ! -f "$DIRECTORY/plasmic.json" ]; then
            echo "Copying plasmic.json to correct location"
            # First check if it exists in tmp-cpa
            if [ -f "tmp-cpa/plasmic.json" ]; then
              cp tmp-cpa/plasmic.json "$DIRECTORY/"
            else
              # Recreate it
              cat > "$DIRECTORY/plasmic.json" << 'EOL'
              {
                "host": "https://suinova.var-meta.com",
                "projects": [
                  {
                    "projectId": "${{ github.event.client_payload.data.projectId }}",
                    "projectApiToken": "${{ github.event.client_payload.data.projectApiToken }}"
                  }
                ]
              }
              EOL
            fi
          fi
      
      - id: sync
        name: Syncing Plasmic project...
        if: ${{ github.event.client_payload.data.scheme == 'codegen' && steps.init.outputs.synced != 'true' }}
        uses: phucvarmeta/plasmic-action@v1.0.0
        with:
          run: sync
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.event.client_payload.data.branch }}
          directory: ${{ github.event.client_payload.data.directory }}
          project_id: ${{ github.event.client_payload.data.projectId }}
          project_api_token: ${{ github.event.client_payload.data.projectApiToken }}
          sync_action: ${{ github.event.client_payload.data.syncAction }}
          title: ${{ github.event.client_payload.data.title }}
          description: ${{ github.event.client_payload.data.description }}
      
      - id: build
        name: Building Plasmic app...
        if: ${{ github.event.client_payload.data.publish }}
        uses: phucvarmeta/plasmic-action@v1.0.0
        with:
          run: build
          branch: ${{ github.event.client_payload.data.branch }}
          directory: ${{ github.event.client_payload.data.directory }}
          platform: ${{ github.event.client_payload.data.platform }}
      
      - id: pr
        name: Creating pull request...
        uses: repo-sync/pull-request@v2
        if: ${{ steps.sync.outputs.new_branch }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          source_branch: ${{ steps.sync.outputs.new_branch }}
          destination_branch: ${{ github.event.client_payload.data.branch }}
